#!/usr/bin/env python3
import argparse
import logging
from pathlib import Path

# TODO description
DESCRIPTION = """\
description
"""

RESULT_PATH = Path('results')
SCENARIO_PATH = RESULT_PATH / '.scenarios'

logger = logging.getLogger('dmprsim')
logger.setLevel(logging.DEBUG)
core_logger = logging.getLogger('dmprsim.core.dmpr')
core_logger.setLevel(logging.DEBUG)


class AbstractAnalyzer(object):
    NAME = 'abstract'
    NUM = 0

    @classmethod
    def argparser(cls, sub_parser: argparse._SubParsersAction):
        parser = sub_parser.add_parser(cls.NAME)  # , aliases=[str(cls.NUM)])
        cls.add_args(parser)
        parser.set_defaults(func=cls.start)

    @classmethod
    def add_args(cls, parser: argparse.ArgumentParser):
        pass

    @classmethod
    def start(cls, args):
        # Setup logging

        # We want to split core and sim logs
        core_logger.propagate = False

        console_handler = logging.StreamHandler()
        console_handler.setLevel(logging.INFO)

        core_console_handler = logging.StreamHandler()
        core_console_handler.setLevel(logging.WARNING)

        file_handler = logging.FileHandler(
            str(RESULT_PATH / cls.NAME / 'sim.log'))
        file_handler.setLevel(logging.INFO)

        core_file_handler = logging.FileHandler(
            str(RESULT_PATH / cls.NAME / 'core.log'))
        core_file_handler.setLevel(logging.INFO)

        if args.debug:
            console_handler.setLevel(logging.DEBUG)
            core_console_handler.setLevel(logging.DEBUG)
            file_handler.setLevel(logging.DEBUG)
            core_file_handler.setLevel(logging.DEBUG)
        elif args.verbose:
            console_handler.setLevel(logging.INFO)
        elif args.quiet:
            console_handler.setLevel(logging.WARNING)

        logger.addHandler(console_handler)
        core_logger.addHandler(core_console_handler)

        if not args.disable_logfile:
            logger.addHandler(file_handler)
            core_logger.addHandler(core_file_handler)

        cls.run(args)

    @classmethod
    def run(cls, args):
        raise NotImplementedError


class MessageSize(AbstractAnalyzer):
    NUM = 1
    NAME = '{:03}-message-size'.format(NUM)

    @classmethod
    def add_args(cls, parser: argparse.ArgumentParser):
        parser.add_argument('--max-ram', default=16, type=int,
                            help='Maximum RAM in GB')

    @classmethod
    def run(cls, args):
        # Set default loglevel for this simulation to warning
        from dmprsim.analyze.message_size import main
        main(args, RESULT_PATH / cls.NAME, SCENARIO_PATH / cls.NAME)


class DisappearingNode(AbstractAnalyzer):
    NUM = 2
    NAME = '{:03}-disappearing-node'.format(NUM)

    @classmethod
    def add_args(cls, parser: argparse.ArgumentParser):
        parser.add_argument('--sequence-diagram', action='store_true')
        parser.add_argument('--seq-diag-type', default='SVG',
                            choices=('SVG', 'PNG'))

    @classmethod
    def run(cls, args):
        from dmprsim.analyze.disappearing_node import main
        main(args, RESULT_PATH / cls.NAME, SCENARIO_PATH / cls.NAME)


class ProfileCore(AbstractAnalyzer):
    NUM = 3
    NAME = '{:03}-profile-core'.format(NUM)

    @classmethod
    def run(cls, args):
        from dmprsim.analyze.profile_core import main
        main(args, RESULT_PATH / cls.NAME, SCENARIO_PATH / cls.NAME)


def main():
    parser = argparse.ArgumentParser()
    parser.set_defaults(func=lambda args: parser.print_help())
    parser.add_argument('--enable-video', action='store_true')
    parser.add_argument('--enable-images', action='store_true')
    parser.add_argument('--simulate-forwarding', action='store_true')

    # Option for logging: quiet
    logging_group = parser.add_argument_group(
        'logging configuration',
        'debug overrides verbose overrides quiet'
    )
    logging_group.add_argument('--quiet', action='store_true',
                               default=argparse.SUPPRESS)
    logging_group.add_argument('--verbose', action='store_true',
                               default=argparse.SUPPRESS)
    logging_group.add_argument('--debug', action='store_true',
                               default=argparse.SUPPRESS)
    logging_group.add_argument('--disable-logfile', action='store_true')

    sub_parsers = parser.add_subparsers(title="Analyze options",
                                        description="valid analyze scripts")
    MessageSize.argparser(sub_parsers)
    DisappearingNode.argparser(sub_parsers)
    ProfileCore.argparser(sub_parsers)

    args = parser.parse_args()
    args.func(args)


if __name__ == '__main__':
    main()
