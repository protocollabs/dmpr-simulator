#!/usr/bin/env python3
import argparse
import logging
from pathlib import Path

# TODO description
DESCRIPTION = """\
description
"""

RESULT_PATH = Path('results')
SCENARIO_PATH = RESULT_PATH / '.scenarios'

logger = logging.getLogger('dmprsim')

# Ignore infos from core as they get too verbose
core_logger = logging.getLogger('dmprsim.core.dmpr')
core_logger.setLevel(logging.WARNING)


class AbstractAnalyzer(object):
    NAME = 'abstract'
    NUM = 0
    DEFAULT_ARGUMENTS = True

    @classmethod
    def argparser(cls, sub_parser: argparse._SubParsersAction):
        parser = sub_parser.add_parser(cls.NAME, aliases=[str(cls.NUM)])
        if cls.DEFAULT_ARGUMENTS:
            cls._add_default_arguments(parser)
        cls.add_args(parser)
        parser.set_defaults(func=cls.start)

    @staticmethod
    def _add_default_arguments(parser: argparse.ArgumentParser):
        parser.add_argument('--enable-video', action='store_true')
        parser.add_argument('--enable-images', action='store_true')
        parser.add_argument('--simulate-forwarding', action='store_true')
        # Option to force quiet mode, default is set by scenario
        parser.add_argument('--quiet', action='store_const', const=True,
                            default=argparse.SUPPRESS)
        parser.add_argument('--verbose', action='store_const', const=True,
                            default=argparse.SUPPRESS)
        parser.add_argument('--debug', action='store_const', const=True,
                            default=argparse.SUPPRESS)

    @classmethod
    def add_args(cls, parser: argparse.ArgumentParser):
        pass

    @classmethod
    def start(cls, args):
        loglevel = logging.INFO
        if getattr(args, 'quiet', False):
            loglevel = logging.WARNING
        elif getattr(args, 'verbose', False):
            loglevel = logging.DEBUG
        elif getattr(args, 'debug', False):
            loglevel = logging.DEBUG
            core_logger.setLevel(loglevel)

        logger.setLevel(loglevel)
        handler = logging.StreamHandler()
        handler.setLevel(loglevel)
        logger.addHandler(handler)

        cls.run(args)

    @classmethod
    def run(cls, args):
        raise NotImplementedError


class MessageSize(AbstractAnalyzer):
    NUM = 1
    NAME = '{:03}-message-size'.format(NUM)

    @classmethod
    def add_args(cls, parser: argparse.ArgumentParser):
        parser.add_argument('--max-ram', default=16, type=int,
                            help='Maximum RAM in GB')

    @classmethod
    def run(cls, args):
        # Set default loglevel for this simulation to warning
        from dmprsim.analyze.message_size import main
        main(args, RESULT_PATH / cls.NAME, SCENARIO_PATH / cls.NAME)


class DisappearingNode(AbstractAnalyzer):
    NUM = 2
    NAME = '{:03}-disappearing-node'.format(NUM)

    @classmethod
    def add_args(cls, parser: argparse.ArgumentParser):
        parser.add_argument('--sequence-diagram', action='store_true')
        parser.add_argument('--seq-diag-type', default='SVG',
                            choices=('SVG', 'PNG'))

    @classmethod
    def run(cls, args):
        from dmprsim.analyze.disappearing_node import main
        main(args, RESULT_PATH / cls.NAME, SCENARIO_PATH / cls.NAME)


class ProfileCore(AbstractAnalyzer):
    NUM = 3
    NAME = '{:03}-profile-core'.format(NUM)

    @classmethod
    def run(cls, args):
        from dmprsim.analyze.profile_core import main
        main(args, RESULT_PATH / cls.NAME, SCENARIO_PATH / cls.NAME)


def main():
    parser = argparse.ArgumentParser()
    parser.set_defaults(func=lambda args: parser.print_help())
    sub_parsers = parser.add_subparsers(title="Analyze options",
                                        description="valid analyze scripts")
    MessageSize.argparser(sub_parsers)
    DisappearingNode.argparser(sub_parsers)
    ProfileCore.argparser(sub_parsers)

    args = parser.parse_args()
    args.func(args)


if __name__ == '__main__':
    main()
